{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { DazeSessionResponse } from \"./types/DazeApi\";\n\nclass TimeslotPickerComponent extends HTMLElement {\n    sessionId: string | undefined;\n    allowedOrigin: string | undefined;\n    backendUrl: string | undefined;\n\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n    }\n\n    async connectedCallback() {\n        console.log('TimeslotPickerComponent connected', process.env.BACKEND_URL);\n        const url = process.env.BACKEND_URL ?? this.getAttribute('backendUrl');\n        if (!url) {\n            console.error('backendUrl attribute is required');\n            return;\n        }\n        this.backendUrl = url;\n        this.sessionId = sessionStorage.getItem('sessionId') || undefined;\n\n\n        await this.createOrUpdateSession();\n\n        window.addEventListener('message', this.handleMessage.bind(this));\n    }\n\n    disconnectedCallback() {\n        window.removeEventListener('message', this.handleMessage.bind(this));\n    }\n\n    async createOrUpdateSession() {\n        if (!this.backendUrl) {\n            throw new Error('backendUrl attribute is required');\n        }\n        try {\n            const orderData = this.getAttribute('orderData') || '{}';\n            const url = this.sessionId ? `${this.backendUrl}?sessionId=${this.sessionId}` : this.backendUrl;\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    \"x-version\": \"1.0.0\"\n                },\n                body: orderData\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to create or update session');\n            }\n\n            const result: DazeSessionResponse = await response.json();\n            this.sessionId = result.sessionId;\n            this.allowedOrigin = result.url;\n\n            this.renderIframe(); \n        } catch (error) {\n            console.error('Error creating or updating session:', error);\n        }\n    }\n    renderIframe() {\n        const iframeSrc = `${this.allowedOrigin}`;\n        this.shadowRoot!.innerHTML = `\n            <style>\n                :host {\n                    display: block;\n                    width: 100%;\n                    height: 100%;\n                    position: relative;\n                }\n                iframe {\n                    width: 100%;\n                    height: 100%;\n                    border: none;\n                }\n            </style>\n            <iframe src=\"${iframeSrc}\" id=\"timeslotPickerIframe\"></iframe>\n        `;\n    }\n\n    handleMessage(event: MessageEvent) {\n        if (event.origin !== this.allowedOrigin) {\n            console.warn('Invalid origin:', event.origin);\n            return;\n        }\n\n        const onSuccess = new Function(`return ${this.getAttribute('onSuccess')}`)();\n        const onError = new Function(`return ${this.getAttribute('onError')}`)();\n        if (event.data.type === 'CONFIRMATION') {\n            if (onSuccess) {\n                onSuccess(event.data.timeslot);\n            }\n        } else if (event.data.type === 'ERROR') {\n            console.error('Error selecting timeslot:', event.data.message);\n            if (onError) {\n                onError(event.data.message);\n            }\n        }\n    }\n}\n\nif (!customElements.get('timeslot-picker')) {\n    customElements.define('timeslot-picker', TimeslotPickerComponent);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,0BAAN,cAAsC,YAAY;AAAA,IAK9C,cAAc;AACV,YAAM;AACN,WAAK,aAAa,EAAE,MAAM,OAAO,CAAC;AAAA,IACtC;AAAA,IAEM,oBAAoB;AAAA;AACtB,gBAAQ,IAAI,qCAAqC,uFAAuB;AACxE,cAAM,MAAM;AACZ,YAAI,CAAC,KAAK;AACN,kBAAQ,MAAM,kCAAkC;AAChD;AAAA,QACJ;AACA,aAAK,aAAa;AAClB,aAAK,YAAY,eAAe,QAAQ,WAAW,KAAK;AAGxD,cAAM,KAAK,sBAAsB;AAEjC,eAAO,iBAAiB,WAAW,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,MACpE;AAAA;AAAA,IAEA,uBAAuB;AACnB,aAAO,oBAAoB,WAAW,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,IACvE;AAAA,IAEM,wBAAwB;AAAA;AAC1B,YAAI,CAAC,KAAK,YAAY;AAClB,gBAAM,IAAI,MAAM,kCAAkC;AAAA,QACtD;AACA,YAAI;AACA,gBAAM,YAAY,KAAK,aAAa,WAAW,KAAK;AACpD,gBAAM,MAAM,KAAK,YAAY,GAAG,KAAK,UAAU,cAAc,KAAK,SAAS,KAAK,KAAK;AACrF,gBAAM,WAAW,MAAM,MAAM,KAAK;AAAA,YAC9B,QAAQ;AAAA,YACR,SAAS;AAAA,cACL,gBAAgB;AAAA,cAChB,aAAa;AAAA,YACjB;AAAA,YACA,MAAM;AAAA,UACV,CAAC;AAED,cAAI,CAAC,SAAS,IAAI;AACd,kBAAM,IAAI,MAAM,oCAAoC;AAAA,UACxD;AAEA,gBAAM,SAA8B,MAAM,SAAS,KAAK;AACxD,eAAK,YAAY,OAAO;AACxB,eAAK,gBAAgB,OAAO;AAE5B,eAAK,aAAa;AAAA,QACtB,SAAS,OAAO;AACZ,kBAAQ,MAAM,uCAAuC,KAAK;AAAA,QAC9D;AAAA,MACJ;AAAA;AAAA,IACA,eAAe;AACX,YAAM,YAAY,GAAG,KAAK,aAAa;AACvC,WAAK,WAAY,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAcV,SAAS;AAAA;AAAA,IAEhC;AAAA,IAEA,cAAc,OAAqB;AAC/B,UAAI,MAAM,WAAW,KAAK,eAAe;AACrC,gBAAQ,KAAK,mBAAmB,MAAM,MAAM;AAC5C;AAAA,MACJ;AAEA,YAAM,YAAY,IAAI,SAAS,UAAU,KAAK,aAAa,WAAW,CAAC,EAAE,EAAE;AAC3E,YAAM,UAAU,IAAI,SAAS,UAAU,KAAK,aAAa,SAAS,CAAC,EAAE,EAAE;AACvE,UAAI,MAAM,KAAK,SAAS,gBAAgB;AACpC,YAAI,WAAW;AACX,oBAAU,MAAM,KAAK,QAAQ;AAAA,QACjC;AAAA,MACJ,WAAW,MAAM,KAAK,SAAS,SAAS;AACpC,gBAAQ,MAAM,6BAA6B,MAAM,KAAK,OAAO;AAC7D,YAAI,SAAS;AACT,kBAAQ,MAAM,KAAK,OAAO;AAAA,QAC9B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,CAAC,eAAe,IAAI,iBAAiB,GAAG;AACxC,mBAAe,OAAO,mBAAmB,uBAAuB;AAAA,EACpE;",
  "names": []
}
